import { writeFile, mkdir } from "fs/promises"
import { ZodType } from "zod"
import { createTypeAlias, printNode, zodToTs } from "zod-to-ts"
import * as prettier from "prettier"
import assert from "assert"
import z from "zod"

const pascalCase = (name: string) => {
  return name
    .replace(/[\W_-]+/g, " ")
    .split(/ |\B(?=[A-Z])/)
    .map((word) => word.charAt(0).toUpperCase() + word.toLowerCase().slice(1))
    .join("")
}

const camelCase = (name: string) => {
  const pascalCaseName = pascalCase(name)
  return pascalCaseName.charAt(0).toLowerCase() + pascalCaseName.slice(1)
}

/**
 *  Write a typescript file with the given data and schema.
 *
 * @param name Name of the file/data. In snake case of
 * @param data Data to write to the file.
 * @param schema Zod schema of the data. Used to generate typescript types.
 */
export const writeDataFile = async <ResultType>(
  filename: string,
  data: ResultType,
  schema: ZodType<ResultType, any, any>,
) => {
  const name = filename.split("/").findLast(() => true)
  assert(name, "You have to pass a name")
  const directory = filename.split("/").slice(0, -1).join("/")
  const fileName = camelCase(name)
  console.log(`Writing ${name} to public/data/${fileName}`)
  const directoryPath = `${module.path}/../../public/data/${directory}`
  const tsFilePath = `${directoryPath}/${fileName}.ts`
  const jsonFilePath = `${directoryPath}/${fileName}.json`

  // Create directory
  if (directory) {
    await mkdir(directoryPath, { recursive: true })
  }

  // Write typescript file
  const typeIdentifier = pascalCase(name)
  const valueIdentifier =
    typeIdentifier.charAt(0).toLowerCase() + typeIdentifier.slice(1)
  const { node } = zodToTs(schema, typeIdentifier)
  const typeAlias = createTypeAlias(node, typeIdentifier)
  const fileContent = `
  // This file is automatically generated. Do not modify manually.

  export ${printNode(typeAlias)}

  const ${valueIdentifier}: ${typeIdentifier} = ${JSON.stringify(
    data,
    null,
    0,
  )} satisfies ${typeIdentifier};

  // Export as default value to avoid a weird bug where json files are sometimes preferred over ts files
  export default ${valueIdentifier};
  `
  const options = await prettier.resolveConfig(tsFilePath)
  const formattedContent = await prettier.format(fileContent, {
    ...(options ?? {}),
    parser: "typescript",
  })
  await writeFile(tsFilePath, formattedContent)

  // Write json file
  // Serialize and deserialize for some reason, probably cleaning
  const jsonObject: typeof data = JSON.parse(JSON.stringify(data, null, 0))
  const jsonPrettierOptions = await prettier.resolveConfig(jsonFilePath)
  const formattedJson = await prettier.format(
    JSON.stringify(jsonObject, null, 0),
    {
      ...(jsonPrettierOptions ?? {}),
      parser: "json",
    },
  )
  await writeFile(jsonFilePath, formattedJson)
}
